{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/core/services/schedule-api.service\";\nfunction getIconStringFromStatus(status) {\n  switch (status) {\n    case 'Completed':\n      return 'bg-success';\n    case 'Pending':\n      return 'bg-info';\n  }\n  ;\n  return 'bg-warning';\n}\nexport class ScheduleViewModel {\n  constructor(schedule) {\n    this.schedule = schedule;\n    this.name = schedule.name;\n    this.startDate = schedule.start_date;\n    this.endDate = schedule.end_date;\n    this.submissionDateTime = schedule.submission_date_time;\n    this.status = schedule.status;\n    this.icon = getIconStringFromStatus(this.status);\n  }\n}\nexport class SchedulePageComponent {\n  constructor(scheduleAPI) {\n    this.scheduleAPI = scheduleAPI;\n    this.schedules = [];\n    this.currentTab = 0;\n    this.MAX_TABS = 4;\n  }\n  ngOnInit() {\n    this.scheduleAPI.getSchedules().subscribe(scheduleDTO => {\n      this.schedules = scheduleDTO.map(schedule => {\n        return new ScheduleViewModel(schedule);\n      });\n    });\n  }\n  prevNext(inc) {\n    this.currentTab += inc;\n    if (this.currentTab < 0) {\n      this.currentTab = 0;\n    }\n    if (this.currentTab >= this.MAX_TABS) {\n      this.currentTab = this.MAX_TABS - 1;\n    }\n  }\n}\nSchedulePageComponent.ɵfac = function SchedulePageComponent_Factory(t) {\n  return new (t || SchedulePageComponent)(i0.ɵɵdirectiveInject(i1.ScheduleAPIService));\n};\nSchedulePageComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SchedulePageComponent,\n  selectors: [[\"sc-schedule-page\"]],\n  decls: 2,\n  vars: 0,\n  template: function SchedulePageComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \"Choose a Scheduling Task\");\n      i0.ɵɵelementEnd();\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;AAIA,SAASA,uBAAuB,CAACC,MAAc;EAC7C,QAAQA,MAAM;IACZ,KAAK,WAAW;MACd,OAAO,YAAY;IACrB,KAAK,SAAS;MACZ,OAAO,SAAS;EAAC;EACpB;EAED,OAAO,YAAY;AACrB;AAEA,OAAM,MAAOC,iBAAiB;EAQ5BC,YAAoBC,QAAkB;IAAlB,aAAQ,GAARA,QAAQ;IAC1B,IAAI,CAACC,IAAI,GAAGD,QAAQ,CAACC,IAAI;IACzB,IAAI,CAACC,SAAS,GAAGF,QAAQ,CAACG,UAAU;IACpC,IAAI,CAACC,OAAO,GAAGJ,QAAQ,CAACK,QAAQ;IAChC,IAAI,CAACC,kBAAkB,GAAGN,QAAQ,CAACO,oBAAoB;IACvD,IAAI,CAACV,MAAM,GAAGG,QAAQ,CAACH,MAAM;IAC7B,IAAI,CAACW,IAAI,GAAGZ,uBAAuB,CAAC,IAAI,CAACC,MAAM,CAAC;EAClD;;AAQF,OAAM,MAAOY,qBAAqB;EAOhCV,YAAoBW,WAA+B;IAA/B,gBAAW,GAAXA,WAAW;IAL/B,cAAS,GAAwB,EAAE;IAEnC,eAAU,GAAW,CAAC;IACtB,aAAQ,GAAW,CAAC;EAEmC;EAEvDC,QAAQ;IACN,IAAI,CAACD,WAAW,CAACE,YAAY,EAAE,CAACC,SAAS,CAACC,WAAW,IAAG;MACtD,IAAI,CAACC,SAAS,GAAGD,WAAW,CAACE,GAAG,CAAChB,QAAQ,IAAG;QAAG,OAAO,IAAIF,iBAAiB,CAACE,QAAQ,CAAC;MAAC,CAAC,CAAC;IAC1F,CAAC,CAAC;EACJ;EAEAiB,QAAQ,CAACC,GAAW;IAClB,IAAI,CAACC,UAAU,IAAID,GAAG;IAEtB,IAAI,IAAI,CAACC,UAAU,GAAG,CAAC,EAAE;MACvB,IAAI,CAACA,UAAU,GAAG,CAAC;;IAGrB,IAAI,IAAI,CAACA,UAAU,IAAI,IAAI,CAACC,QAAQ,EAAE;MACpC,IAAI,CAACD,UAAU,GAAG,IAAI,CAACC,QAAQ,GAAG,CAAC;;EAEvC;;;mBAzBWX,qBAAqB;AAAA;;QAArBA,qBAAqB;EAAAY;EAAAC;EAAAC;EAAAC;IAAA;MCtClCC,0BAAI;MAAAA,wCAAwB;MAAAA,iBAAK","names":["getIconStringFromStatus","status","ScheduleViewModel","constructor","schedule","name","startDate","start_date","endDate","end_date","submissionDateTime","submission_date_time","icon","SchedulePageComponent","scheduleAPI","ngOnInit","getSchedules","subscribe","scheduleDTO","schedules","map","prevNext","inc","currentTab","MAX_TABS","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["/home/keelerjr/dev/sparkcell-autoscheduler/web/src/app/schedule/schedule-page/schedule-page.component.ts","/home/keelerjr/dev/sparkcell-autoscheduler/web/src/app/schedule/schedule-page/schedule-page.component.html"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Schedule } from 'src/app/core/models/schedule.model';\nimport { ScheduleAPIService } from 'src/app/core/services/schedule-api.service';\n\nfunction getIconStringFromStatus(status: string) {\n  switch (status) {\n    case 'Completed':\n      return 'bg-success';\n    case 'Pending':\n      return 'bg-info';\n  };\n\n  return 'bg-warning';\n}\n\nexport class ScheduleViewModel {\n  name: string;\n  startDate: string;\n  endDate: string;\n  submissionDateTime: string;\n  status: string;\n  icon: string;\n\n  constructor(private schedule: Schedule) {\n    this.name = schedule.name;\n    this.startDate = schedule.start_date;\n    this.endDate = schedule.end_date;\n    this.submissionDateTime = schedule.submission_date_time;\n    this.status = schedule.status;\n    this.icon = getIconStringFromStatus(this.status);\n  }\n}\n\n@Component({\n  selector: 'sc-schedule-page',\n  templateUrl: './schedule-page.component.html',\n  styleUrls: ['./schedule-page.component.css']\n})\nexport class SchedulePageComponent {\n\n  schedules: ScheduleViewModel[] = []\n\n  currentTab: number = 0;\n  MAX_TABS: number = 4;\n\n  constructor(private scheduleAPI: ScheduleAPIService) { }\n\n  ngOnInit() {\n    this.scheduleAPI.getSchedules().subscribe(scheduleDTO => {\n      this.schedules = scheduleDTO.map(schedule => { return new ScheduleViewModel(schedule) });\n    });\n  }\n\n  prevNext(inc: number) {\n    this.currentTab += inc;\n\n    if (this.currentTab < 0) {\n      this.currentTab = 0;\n    }\n\n    if (this.currentTab >= this.MAX_TABS) {\n      this.currentTab = this.MAX_TABS - 1;\n    }\n  }\n}\n","<h1>Choose a Scheduling Task</h1>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}