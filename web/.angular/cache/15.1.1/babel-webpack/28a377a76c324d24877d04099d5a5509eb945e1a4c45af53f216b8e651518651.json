{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet PersonnelPageComponent = class PersonnelPageComponent {\n  constructor() {\n    const person_dtos = [{\n      id: 1,\n      name: \"Keeler, Joshua\",\n      assigned_org: \"\",\n      quals: [\"Operations Supervisor\"]\n    }, {\n      id: 2,\n      name: \"Van Epps, Lucas\",\n      assigned_org: \"O\",\n      quals: [\"RSU Controller\", \"RSU Observer\"]\n    }];\n    this.quals = ['Operations Supervisor', 'SOF', 'RSU Controller', 'RSU Observer', 'IPC Pilot', 'FPC Pilot', 'FCF Pilot', 'PIT IP', 'SEFE'];\n    this.qual_options = ['', 'X'];\n    this.persons = person_dtos.map(person_dto => {\n      const mapped_quals = new Map(this.quals.map(qual => {\n        const key = qual;\n        let val = '';\n        if (person_dto.quals.includes(qual)) val = 'X';\n        return [key, val];\n      }));\n      const person_view = {\n        id: person_dto.id,\n        name: person_dto.name,\n        assigned_org: person_dto.assigned_org,\n        quals: mapped_quals\n      };\n      console.log(person_view.quals);\n      return person_view;\n    });\n    this.assigned_orgs = [' ', 'M', 'N', 'O', 'P', 'X'];\n    this.isEditable = this.persons.map(() => {\n      return false;\n    });\n  }\n  onEdit(row) {\n    this.isEditable[row] = true;\n  }\n  onSave(row) {\n    this.isEditable[row] = false;\n    console.log('Updating: ' + this.persons[row].name);\n    console.log(this.persons[row]);\n    /*console.log(data);\n    const httpRequest = new XMLHttpRequest();\n    httpRequest.onreadystatechange = () => {\n        if (httpRequest.readyState === XMLHttpRequest.DONE) {\n            if (httpRequest.status === 200) {\n                console.log(\"Data saved\");\n            }\n        }\n    };\n         httpRequest.open('POST', '/personnel/' + data.person_id);\n    httpRequest.setRequestHeader('Content-Type', 'application/json');\n         const csrfToken = Cookies.get('csrftoken');\n    httpRequest.setRequestHeader('X-CSRFToken', csrfToken);\n         httpRequest.send(JSON.stringify(data));*/\n  }\n};\n\nPersonnelPageComponent = __decorate([Component({\n  selector: 'sc-personnel-page',\n  templateUrl: './personnel-page.component.html',\n  styleUrls: ['./personnel-page.component.css']\n})], PersonnelPageComponent);\nexport { PersonnelPageComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AASlC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAOjCC;IACE,MAAMC,WAAW,GAAa,CAC5B;MACEC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,gBAAgB;MACtBC,YAAY,EAAE,EAAE;MAChBC,KAAK,EAAE,CAAC,uBAAuB;KAChC,EACD;MACEH,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,iBAAiB;MACvBC,YAAY,EAAE,GAAG;MACjBC,KAAK,EAAE,CAAC,gBAAgB,EAAE,cAAc;KACzC,CACF;IAED,IAAI,CAACA,KAAK,GAAG,CACX,uBAAuB,EAAE,KAAK,EAAE,gBAAgB,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,WAAW,EAAE,QAAQ,EAAE,MAAM,CAC1H;IAED,IAAI,CAACC,YAAY,GAAG,CAAC,EAAE,EAAE,GAAG,CAAC;IAE7B,IAAI,CAACC,OAAO,GAAGN,WAAW,CAACO,GAAG,CAACC,UAAU,IAAG;MAC1C,MAAMC,YAAY,GAAG,IAAIC,GAAG,CAAC,IAAI,CAACN,KAAK,CAACG,GAAG,CAACI,IAAI,IAAG;QACjD,MAAMC,GAAG,GAAGD,IAAI;QAChB,IAAIE,GAAG,GAAG,EAAE;QAEZ,IAAIL,UAAU,CAACJ,KAAK,CAACU,QAAQ,CAACH,IAAI,CAAC,EACjCE,GAAG,GAAG,GAAG;QAEX,OAAO,CAACD,GAAG,EAAEC,GAAG,CAAC;MACnB,CAAC,CAAC,CAAC;MAGH,MAAME,WAAW,GAAe;QAC9Bd,EAAE,EAAEO,UAAU,CAACP,EAAE;QACjBC,IAAI,EAAEM,UAAU,CAACN,IAAI;QACrBC,YAAY,EAAEK,UAAU,CAACL,YAAY;QACrCC,KAAK,EAAEK;OACR;MAEDO,OAAO,CAACC,GAAG,CAACF,WAAW,CAACX,KAAK,CAAC;MAE9B,OAAOW,WAAW;IACpB,CAAC,CAAC;IAEF,IAAI,CAACG,aAAa,GAAG,CACnB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,CAC7B;IAED,IAAI,CAACC,UAAU,GAAG,IAAI,CAACb,OAAO,CAACC,GAAG,CAAC,MAAK;MACtC,OAAO,KAAK;IACd,CAAC,CAAC;EACJ;EAEAa,MAAM,CAACC,GAAW;IAChB,IAAI,CAACF,UAAU,CAACE,GAAG,CAAC,GAAG,IAAI;EAC7B;EAEAC,MAAM,CAACD,GAAW;IAChB,IAAI,CAACF,UAAU,CAACE,GAAG,CAAC,GAAG,KAAK;IAC5BL,OAAO,CAACC,GAAG,CAAC,YAAY,GAAG,IAAI,CAACX,OAAO,CAACe,GAAG,CAAC,CAACnB,IAAI,CAAC;IAClDc,OAAO,CAACC,GAAG,CAAC,IAAI,CAACX,OAAO,CAACe,GAAG,CAAC,CAAC;IAE9B;;;;;;;;;;;;;;EAiBF;CACD;;AAzFYvB,sBAAsB,eALlCD,SAAS,CAAC;EACT0B,QAAQ,EAAE,mBAAmB;EAC7BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,gCAAgC;CAC7C,CAAC,GACW3B,sBAAsB,CAyFlC;SAzFYA,sBAAsB","names":["Component","PersonnelPageComponent","constructor","person_dtos","id","name","assigned_org","quals","qual_options","persons","map","person_dto","mapped_quals","Map","qual","key","val","includes","person_view","console","log","assigned_orgs","isEditable","onEdit","row","onSave","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/keelerjr/dev/sparkcell-autoscheduler/web/src/app/personnel/personnel-page/personnel-page.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Person } from '../../core/models/person.model'\nimport { PersonView } from '../shared/personview.model';\n\n@Component({\n  selector: 'sc-personnel-page',\n  templateUrl: './personnel-page.component.html',\n  styleUrls: ['./personnel-page.component.css']\n})\nexport class PersonnelPageComponent {\n  persons: PersonView[];\n  assigned_orgs: string[];\n  quals: string[];\n  qual_options: string[];\n  isEditable: boolean[];\n\n  constructor() {\n    const person_dtos: Person[] = [\n      {\n        id: 1,\n        name: \"Keeler, Joshua\",\n        assigned_org: \"\",\n        quals: [\"Operations Supervisor\"]\n      },\n      {\n        id: 2,\n        name: \"Van Epps, Lucas\",\n        assigned_org: \"O\",\n        quals: [\"RSU Controller\", \"RSU Observer\"]\n      }\n    ]\n\n    this.quals = [\n      'Operations Supervisor', 'SOF', 'RSU Controller', 'RSU Observer', 'IPC Pilot', 'FPC Pilot', 'FCF Pilot', 'PIT IP', 'SEFE'\n    ];\n\n    this.qual_options = ['', 'X']\n\n    this.persons = person_dtos.map(person_dto => {\n      const mapped_quals = new Map(this.quals.map(qual => {\n        const key = qual;\n        let val = '';\n\n        if (person_dto.quals.includes(qual))\n          val = 'X';\n\n        return [key, val] \n      }));\n\n\n      const person_view: PersonView = {\n        id: person_dto.id,\n        name: person_dto.name,\n        assigned_org: person_dto.assigned_org,\n        quals: mapped_quals\n      };\n\n      console.log(person_view.quals);\n\n      return person_view;\n    });\n\n    this.assigned_orgs = [\n      ' ', 'M', 'N', 'O', 'P', 'X'\n    ];\n\n    this.isEditable = this.persons.map(() => {\n      return false;\n    })\n  }\n\n  onEdit(row: number) {\n    this.isEditable[row] = true;\n  }\n\n  onSave(row: number) {\n    this.isEditable[row] = false;\n    console.log('Updating: ' + this.persons[row].name);\n    console.log(this.persons[row]);\n\n    /*console.log(data);\n    const httpRequest = new XMLHttpRequest();\n    httpRequest.onreadystatechange = () => {\n        if (httpRequest.readyState === XMLHttpRequest.DONE) {\n            if (httpRequest.status === 200) {\n                console.log(\"Data saved\");\n            }\n        }\n    };\n\n    httpRequest.open('POST', '/personnel/' + data.person_id);\n    httpRequest.setRequestHeader('Content-Type', 'application/json');\n\n    const csrfToken = Cookies.get('csrftoken');\n    httpRequest.setRequestHeader('X-CSRFToken', csrfToken);\n\n    httpRequest.send(JSON.stringify(data));*/\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}